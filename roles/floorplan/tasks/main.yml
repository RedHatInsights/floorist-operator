---
# tasks file for FloorPlan
- name: Set up floorplan
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: '{{ ansible_operator_meta.name }}-floorplan'
        namespace: '{{ ansible_operator_meta.namespace }}'
      data:
        floorplan.yaml: '{{ queries | to_nice_yaml }}'
- name: Gather facts from existing floorplans
  ansible.builtin.set_fact:
    existing_schedule: "{{ _metrics_console_redhat_com_floorplan.get('status', {}).get('schedule') }}"
    # Gather used schedules from all FloorPlans from status.schedule attribute,
    # taking only mintues and hours.
    used_slots:
      "{{ query('kubernetes.core.k8s', api_version='metrics.console.redhat.com/v1alpha1', kind='FloorPlan')
          | map(attribute='status', default={})
          | map(attribute='schedule', default='')
          | map('regex_replace', '^([^ ]+) ([^ ]+).*$', '\\1 \\2')
          | list
        }}"
    # Generate available schedules as a product of hours and mintues
    # with a certain step.
    # Hours are generated first, but then swapped, to ensure sequence.
    available_slots:
      "{{ range(0, 24)
          | product(range(0, 60, schedule_step))
          | map('join', ' ')
          | map('regex_replace', '^([^ ]+) ([^ ]+)$', '\\2 \\1')
          | difference(skip_schedules)
          | list
        }}"
- name: Set schedule fact
  ansible.builtin.set_fact:
    schedule:
      "{{ existing_schedule | default((available_slots | difference(used_slots) | first) + ' * * *', true) }}"
- name: Set up floorist schedule
  kubernetes.core.k8s:
    apply: yes
    definition:
      apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: 'floorist-{{ ansible_operator_meta.name }}-exporter'
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ ansible_operator_meta.name }}-floorist'
          pod: 'floorist-{{ ansible_operator_meta.name }}-exporter'
          service: floorist
        annotations:
          ignore-check.kube-linter.io/default-service-account: "not used, k8s API access not required"
      spec:
        concurrencyPolicy: Forbid
        failedJobsHistoryLimit: 1
        successfulJobsHistoryLimit: 3
        schedule: "{{ schedule }}"
        suspend: "{{ suspend }}"
        jobTemplate:
          metadata:
            name: 'floorist-{{ ansible_operator_meta.name }}-exporter'
            namespace: '{{ ansible_operator_meta.namespace }}'
            labels:
              app: '{{ ansible_operator_meta.name }}-floorist'
              pod: 'floorist-{{ ansible_operator_meta.name }}-exporter'
              service: floorist
          spec:
            template:
              spec:
                restartPolicy: Never
                terminationGracePeriodSeconds: 30
                automountServiceAccountToken: false
                containers:
                - image:
                    "{{ lookup('ansible.builtin.env', 'FLOORIST_IMAGE') | default('quay.io/cloudservices/floorist', True) }}\
                    :{{ lookup('ansible.builtin.env', 'FLOORIST_IMAGE_TAG') | default('a5d1b1b', True) }}"
                  imagePullPolicy: IfNotPresent
                  env:
                  - name: AWS_BUCKET
                    valueFrom:
                      secretKeyRef:
                        name: '{{ object_store.secret_name }}'
                        key: bucket
                  - name: AWS_REGION
                    valueFrom:
                      secretKeyRef:
                        name: '{{ object_store.secret_name }}'
                        key: aws_region
                  - name: AWS_ENDPOINT
                    valueFrom:
                      secretKeyRef:
                        name: '{{ object_store.secret_name }}'
                        key: endpoint
                  - name: AWS_ACCESS_KEY_ID
                    valueFrom:
                      secretKeyRef:
                        name: '{{ object_store.secret_name }}'
                        key: aws_access_key_id
                  - name: AWS_SECRET_ACCESS_KEY
                    valueFrom:
                      secretKeyRef:
                        name: '{{ object_store.secret_name }}'
                        key: aws_secret_access_key
                  - name: POSTGRES_SERVICE_HOST
                    valueFrom:
                      secretKeyRef:
                        name: '{{ database.secret_name }}'
                        key: db.host
                  - name: POSTGRESQL_USER
                    valueFrom:
                      secretKeyRef:
                        name: '{{ database.secret_name }}'
                        key: db.user
                  - name: POSTGRESQL_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: '{{ database.secret_name }}'
                        key: db.password
                  - name: POSTGRESQL_DATABASE
                    valueFrom:
                      secretKeyRef:
                        name: '{{ database.secret_name }}'
                        key: db.name
                  - name: FLOORPLAN_FILE
                    value: "/tmp/floorplan/floorplan.yaml"
                  - name: LOGLEVEL
                    value: '{{ log_level }}'
                  livenessProbe:
                    exec:
                      command: ["pgrep", "-f", "python"]
                    failureThreshold: 3
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 1
                  name: 'floorist-{{ ansible_operator_meta.name }}-exporter'
                  ports:
                  - containerPort: 9000
                    name: metrics
                    protocol: TCP
                  resources:
                    limits:
                      cpu: 100m
                      memory: 500Mi
                    requests:
                      cpu: 50m
                      memory: 250Mi
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  volumeMounts:
                  - mountPath: /tmp/floorplan
                    name: floorplan-volume
                volumes:
                - configMap:
                    defaultMode: 420
                    name: '{{ ansible_operator_meta.name }}-floorplan'
                  name: floorplan-volume
- name: Set schedule status
  operator_sdk.util.k8s_status:
    api_version: metrics.console.redhat.com/v1alpha1
    kind: FloorPlan
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    status:
      schedule: "{{ schedule }}"
